# coding: utf-8

"""
    Simple Storage Server

    A Simple Storage Server API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_file(self, x_session, filename, **kwargs):  # noqa: E501
        """Deletes a file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_file(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_file_with_http_info(x_session, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_with_http_info(x_session, filename, **kwargs)  # noqa: E501
            return data

    def delete_file_with_http_info(self, x_session, filename, **kwargs):  # noqa: E501
        """Deletes a file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_file_with_http_info(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_session', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_session' is set
        if ('x_session' not in params or
                params['x_session'] is None):
            raise ValueError("Missing the required parameter `x_session` when calling `delete_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `delete_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_session' in params:
            header_params['X-Session'] = params['x_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{filename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_by_name(self, x_session, filename, **kwargs):  # noqa: E501
        """download a file  # noqa: E501

        Returns a single file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file_by_name(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_file_by_name_with_http_info(x_session, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_by_name_with_http_info(x_session, filename, **kwargs)  # noqa: E501
            return data

    def get_file_by_name_with_http_info(self, x_session, filename, **kwargs):  # noqa: E501
        """download a file  # noqa: E501

        Returns a single file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file_by_name_with_http_info(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_session', 'filename']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_session' is set
        if ('x_session' not in params or
                params['x_session'] is None):
            raise ValueError("Missing the required parameter `x_session` when calling `get_file_by_name`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_file_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_session' in params:
            header_params['X-Session'] = params['x_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_files(self, x_session, **kwargs):  # noqa: E501
        """List the user&#39;s files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_user_files(x_session, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_user_files_with_http_info(x_session, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_files_with_http_info(x_session, **kwargs)  # noqa: E501
            return data

    def list_user_files_with_http_info(self, x_session, **kwargs):  # noqa: E501
        """List the user&#39;s files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_user_files_with_http_info(x_session, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_session']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_session' is set
        if ('x_session' not in params or
                params['x_session'] is None):
            raise ValueError("Missing the required parameter `x_session` when calling `list_user_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_session' in params:
            header_params['X-Session'] = params['x_session']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, x_session, filename, **kwargs):  # noqa: E501
        """uploads a file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file (required)
        :param file file: file to upload
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_file_with_http_info(x_session, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_with_http_info(x_session, filename, **kwargs)  # noqa: E501
            return data

    def upload_file_with_http_info(self, x_session, filename, **kwargs):  # noqa: E501
        """uploads a file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file_with_http_info(x_session, filename, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_session: Session token given at login (required)
        :param str filename: name of the file (required)
        :param file file: file to upload
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_session', 'filename', 'file']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_session' is set
        if ('x_session' not in params or
                params['x_session'] is None):
            raise ValueError("Missing the required parameter `x_session` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_session' in params:
            header_params['X-Session'] = params['x_session']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{filename}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
