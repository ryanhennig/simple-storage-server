=begin
#Simple Storage Server

#A Simple Storage Server API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new user
    # 
    # @param body user object to create
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_user(body, opts = {})
      create_user_with_http_info(body, opts)
      return nil
    end

    # Create a new user
    # 
    # @param body user object to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.create_user ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserApi.create_user"
      end
      # resource path
      local_var_path = "/register"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logs user into the system
    # 
    # @param body user object to login
    # @param [Hash] opts the optional parameters
    # @return [SessionToken]
    def login_user(body, opts = {})
      data, _status_code, _headers = login_user_with_http_info(body, opts)
      return data
    end

    # Logs user into the system
    # 
    # @param body user object to login
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionToken, Fixnum, Hash)>] SessionToken data, response status code and response headers
    def login_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.login_user ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserApi.login_user"
      end
      # resource path
      local_var_path = "/login"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#login_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    
    # Delete a user
    # 
    # @param body user object to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(body, opts = {})
      delete_user_with_http_info(body, opts)
      return nil
    end

    # Delete a user
    # 
    # @param body user object to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.delete_user ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserApi.delete_user"
      end
      # resource path
      local_var_path = "/unregister"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    
    # Deletes a file
    # 
    # @param x_session Session token given at login
    # @param filename name of the file to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file(x_session, filename, opts = {})
      delete_file_with_http_info(x_session, filename, opts)
      return nil
    end

    # Deletes a file
    # 
    # @param x_session Session token given at login
    # @param filename name of the file to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(x_session, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FileApi.delete_file ..."
      end
      # verify the required parameter 'x_session' is set
      if @api_client.config.client_side_validation && x_session.nil?
        fail ArgumentError, "Missing the required parameter 'x_session' when calling FileApi.delete_file"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling FileApi.delete_file"
      end
      # resource path
      local_var_path = "/files/{filename}".sub('{' + 'filename' + '}', filename.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Session'] = x_session

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # download a file
    # Returns a single file
    # @param x_session Session token given at login
    # @param filename name of the file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_file_by_name(x_session, filename, opts = {})
      data, _status_code, _headers = get_file_by_name_with_http_info(x_session, filename, opts)
      return data
    end

    # download a file
    # Returns a single file
    # @param x_session Session token given at login
    # @param filename name of the file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_file_by_name_with_http_info(x_session, filename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FileApi.get_file_by_name ..."
      end
      # verify the required parameter 'x_session' is set
      if @api_client.config.client_side_validation && x_session.nil?
        fail ArgumentError, "Missing the required parameter 'x_session' when calling FileApi.get_file_by_name"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling FileApi.get_file_by_name"
      end
      # resource path
      local_var_path = "/files/{filename}".sub('{' + 'filename' + '}', filename.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'X-Session'] = x_session

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#get_file_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the user's files
    # 
    # @param x_session Session token given at login
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def list_user_files(x_session, opts = {})
      data, _status_code, _headers = list_user_files_with_http_info(x_session, opts)
      return data
    end

    # List the user&#39;s files
    # 
    # @param x_session Session token given at login
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def list_user_files_with_http_info(x_session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FileApi.list_user_files ..."
      end
      # verify the required parameter 'x_session' is set
      if @api_client.config.client_side_validation && x_session.nil?
        fail ArgumentError, "Missing the required parameter 'x_session' when calling FileApi.list_user_files"
      end
      # resource path
      local_var_path = "/files"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Session'] = x_session

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#list_user_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # uploads a file
    # 
    # @param x_session Session token given at login
    # @param filename name of the file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file file to upload
    # @return [nil]
    def upload_file(x_session, filename, file_content, content_type, opts = {})
      upload_file_with_http_info(x_session, filename, opts)
      return nil
    end

    # uploads a file
    # 
    # @param x_session Session token given at login
    # @param filename name of the file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file file to upload
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_file_with_http_info(x_session, filename, file_content, content_type = nil, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FileApi.upload_file ..."
      end
      # verify the required parameter 'x_session' is set
      if @api_client.config.client_side_validation && x_session.nil?
        fail ArgumentError, "Missing the required parameter 'x_session' when calling FileApi.upload_file"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling FileApi.upload_file"
      end
      # resource path
      local_var_path = "/files/{filename}".sub('{' + 'filename' + '}', filename.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      # header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'

      if not content_type
        #TODO: Use library to autodetect
        content_type = "application/octet-stream"
      end
            
      header_params['Content-Type'] = content_type
      header_params[:'X-Session'] = x_session

      # form parameters
      # form_params = {}
      # form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
#      post_body = nil
      # auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        #:form_params => form_params,
        # :body => post_body,
        :body => file_content
        # :auth_names => auth_names
        )
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
