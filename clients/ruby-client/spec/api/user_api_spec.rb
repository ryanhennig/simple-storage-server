=begin
#Simple Storage Server

#A Simple Storage Server API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'
require 'support/user_helpers'

# Unit tests for SwaggerClient::UserApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @instance = SwaggerClient::UserApi.new

    @instance.api_client.config.debugging = false
    # @instance.api_client.config.debugging = true
    
    @valid_username = "username"
    @valid_password = "password"

    @valid_user = {
      "username": @valid_username,
      "password": @valid_password
    }
    
    @scriptdir = File.dirname(__FILE__)
    @uploaddir = File.join(@scriptdir, "../file_uploads")
    @downloaddir = File.join(@scriptdir, "../file_downloads")
    
    @textfile_path = File.join(@uploaddir, "textfile.txt")
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instance of UserApi' do
      expect(@instance).to be_instance_of(SwaggerClient::UserApi)
    end
  end

  # unit tests for create_user
  # Create a new user
  # 
  # @param body user object to create
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_user test' do
    it "should not allow usernames less than length 3" do
      user = {
        "username": "a",
        "password": @valid_password
      }
            
      create_user_failure(user, "Invalid username")  
    end
    
    it "should not allow usernames greater than length 20" do
      len21 = "abcdefghijklmnopqrstu"
      expect(len21.length).to eq(21)
      user = {
        "username": len21,
        "password": @valid_password
      }
            
      create_user_failure(user, "Invalid username")        
    end
    
    it "should not allow user to be registered twice" do      
      create_user_successfully(@valid_user) 
      create_user_failure(@valid_user, "User already exists")                  
    end
  
    it "should allow usernames of length 4" do
      user = {
        "username": "abcd",
        "password": @valid_password
      }
      
      create_user_successfully(user)      
    end
    
    it "should allow usernames of length 20" do      
      len20 = "abcdefghijklmnopqrst"
      expect(len20.length).to eq(20)
      user = {
        "username": len20,
        "password": @valid_password
      }
      
      create_user_successfully(user)      
    end
    
    it "should allow passwords of length 8" do
      len8 = "abcdefgh"
      expect(len8.length).to eq(8)
      user = {
        "username": "abcd",
        "password": @valid_password
      }
      
      create_user_successfully(user)      
    end
    
    
    it "should not allow passwords less than length 8" do
      len7 = "abcdefg"
      expect(len7.length).to eq(7)
      user = {
        "username": @valid_username,
        "password": len7
      }
      
      create_user_failure(user, "Invalid password")            
    end
      
  end

  # unit tests for login_user
  # Logs user into the system
  # 
  # @param body user object to create
  # @param [Hash] opts the optional parameters
  # @return [SessionToken]
  describe 'login_user' do
    it "should work" do
      create_user_successfully(@valid_user)
      login_user_successfully(@valid_user)
    end
    
    it "should not accept invalid password" do
      create_user_successfully(@valid_user)
      
      wrong_pass = {
        username: @valid_username,
        password: "wrong_password"
      }
      login_user_failure(wrong_pass, "Invalid password")
    end
  end

  # unit tests for delete_file
  # Deletes a file
  # 
  # @param x_session Session token given at login
  # @param filename name of the file to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_by_name
  # download a file
  # Returns a single file
  # @param x_session Session token given at login
  # @param filename name of the file
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_file_by_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_files
  # List the user&#39;s files
  # 
  # @param x_session Session token given at login
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'list_user_files test' do
    it "should return empty list for new user" do
      # create_user_successfully(@valid_user)
      session_token = login_user_successfully(@valid_user)
            
      files = @instance.list_user_files(session_token)
      
      expect(files).to match_array([])
    end
    
    it "should fail with missing session token" do
      create_user_successfully(@valid_user)
      session_token = login_user_successfully(@valid_user)
      
      # files = @instance.list_user_files("")
      list_files_failure("")
    end
    
  end
  
  def list_files_failure(token)
    begin
      data, status_code, headers = @instance.list_user_files_with_http_info(token)
      fail "no error was thrown"
    rescue SwaggerClient::ApiError => ae
      expect(ae.code).to eq(403) 
    end
  end

  # unit tests for upload_file
  # uploads a file
  # 
  # @param x_session Session token given at login
  # @param filename name of the file
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file file to upload
  # @return [nil]
  describe 'upload_file test' do
    it "should work for a file roundtrip", focus: true do
      filename = File.basename(@textfile_path)
      file_content = File.read(@textfile_path)

      # create_user_successfully(@valid_user)
      token = login_user_successfully(@valid_user)
      upload_file_successfully(token, filename, file_content)
      
      download_content = download_file_successfully(token, filename)

      #Verify that the file content is the same
      expect(file_content).to eql(download_content)
    end
    
    it "should not accept invalid filenames", focus: true do

      filename = File.basename(@textfile_path)
      file_content = File.read(@textfile_path)

      # create_user_successfully(@valid_user)
      token = login_user_successfully(@valid_user)
      upload_file_failure(token, "Inval!dFilename", file_content, "Invalid filename")
    end
  end
  
  def upload_file_successfully(token, filename, file_content)
    begin
      # @instance.api_client.config.debugging = true
      data, status_code, headers = @instance.upload_file_with_http_info(token, filename, file_content)
    rescue SwaggerClient::ApiError => ae
      output = {
        "code": ae.code,
        "response": ae.response_body
      }
      expect(output).to be_nil
    end
  
    expect(status_code).to eq(201)
    expect(headers).to include("Location")
    
    location = headers["Location"]
    expect(location).to eq("http://localhost:4567/files/#{filename}")
  
    return
  end
  
  def download_file_successfully(token, filename, content_type = nil)
    begin
      @instance.api_client.config.debugging = true
      data, status_code, headers = @instance.get_file_by_name_with_http_info(token, filename)
    rescue SwaggerClient::ApiError => ae
      output = {
        "code": ae.code,
        "response": ae.response_body
      }
      expect(output).to be_nil
    end

    expect(status_code).to eq(200)
    expect(headers).to include("Content-Length")
    expect(headers).to include("Content-Type")

    if content_type
      expect(headers["Content-Type"]).to eql(content_type)
    end

    tempfile = data
    download_path = File.join(@downloaddir, filename)
    FileUtils.cp(tempfile, download_path)
    
    file_content = File.read(@textfile_path)
    expect(headers["Content-Length"]).to eql(file_content.length.to_s)

    return file_content
  end
  
  def upload_file_failure(token, filename, file_content, error)
    begin
      # @instance.api_client.config.debugging = true
      data, status_code, headers = @instance.upload_file_with_http_info(token, filename, file_content)
    rescue SwaggerClient::ApiError => ae
      output = {
        "code": ae.code,
        "response": ae.response_body
      }
      expect(ae.code).to eq(403) 
      expect(ae.response_body).to eq({ error: error}.to_json)
      h = ae.response_headers
      expect(h["Content-Type"]).to eql("application/json")
    end
    
    return
  end

end
